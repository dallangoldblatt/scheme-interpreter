#lang racket

(require rackunit)
(require "../interpreter.rkt")

(define test
  (lambda ()
    (display "1...\n")
    (check-eq? (interpret "test1.txt") 150)
    (display "2...\n")
    (check-eq? (interpret "test2.txt") -4)
    (display "3...\n")
    (check-eq? (interpret "test3.txt") 10)
    (display "4...\n")
    (check-eq? (interpret "test4.txt") 16)
    (display "5...\n")
    (check-eq? (interpret "test5.txt") 220)
    (display "6...\n")
    (check-eq? (interpret "test6.txt") 5)
    (display "7...\n")
    (check-eq? (interpret "test7.txt") 6)
    (display "8...\n")
    (check-eq? (interpret "test8.txt") 10)
    (display "9...\n")
    (check-eq? (interpret "test9.txt") 5)
    (display "10...\n")
    (check-eq? (interpret "test10.txt") -39)
    (display "11...\n")
    ;(check-eq? (interpret "test11.txt") 'error)
    (display "12...\n")
    ;(check-eq? (interpret "test12.txt") 'error)
    (display "13...\n")
    ;(check-eq? (interpret "test13.txt") 'error)
    (display "14...\n")
    ;(check-eq? (interpret "test14.txt") 'error)
    (display "15...\n")
    (check-eq? (interpret "test15.txt") 'true)
    (display "16...\n")
    (check-eq? (interpret "test16.txt") 100)
    (display "17...\n")
    (check-eq? (interpret "test17.txt") 'false)
    (display "18...\n")
    (check-eq? (interpret "test18.txt") 'true)
    (display "19...\n")
    (check-eq? (interpret "test19.txt") 128)
    (display "20...\n")
    (check-eq? (interpret "test20.txt") 12)))